name: "Build and deploy aivia"

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BASEIMAGE: "ghcr.io/${{ github.repository }}"

jobs:
  build:
    name: "build"
    runs-on: "ubuntu-latest"
    steps:
    - uses: "actions/checkout@v3"
    - uses: "gradle/wrapper-validation-action@v1"
    - uses: "actions/cache@v3"
      with:
        "path": "~/.gradle/caches"
        "key": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}"
        "restore-keys": "${{ runner.os }}-gradle-"
    - uses: "actions/setup-java@v3"
      with:
        "java-version": "17"
        "distribution": "zulu"
    - name: "compile and run tests"
      run: "./gradlew build"
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker meta
      id: metadata
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.BASEIMAGE }}
        tags: |
          type=raw,value={{date 'YYYYMMDDhhmmss'}}-{{sha}}
          type=raw,value=latest
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    outputs:
      image: "${{ fromJSON(steps.metadata.outputs.json).tags[0] }}"
  deploy:
    name: "deploy for testing"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: "actions/checkout@v3"
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: src/test/resources/aiven-topics.yaml,src/test/resources/configmap.yaml,nais/nais.yaml
          VAR: image=${{ needs.build.outputs.image }}
